#!/usr/bin/env node

'use strict'

const fs = require('fs')
const path = require('path')

// This script updates the index files list.js and list.txt in the bin directory,
// as well as the soljson-latest.js files.

fs.readdir(path.join(__dirname, '/bin'), function (err, files) {
  if (err) return err

  const parsedList = files
    .map(function (file) { return file.match(/^soljson-v([0-9.]*)-(.*).js$/) })
    .filter(function (version) { return version })
    .map(function (pars) { return { path: pars[0], version: pars[1], prerelease: pars[2] } })

  const releases = parsedList
    .reverse()
    .reduce(function (prev, next) {
      prev[next.version] = next.path
      return prev
    }, {})

  const builds = parsedList
    .map(function (ver) { return ver.path })
    .reverse()

  const pathList = builds
    .reverse()
    .reduce(function (prev, next) { return prev + '\n' + next })

  const latest = parsedList.reverse()[parsedList.length - 1].path

  // Write bin/list.txt
  fs.writeFile(path.join(__dirname, '/bin/list.txt'), pathList, function (err) {
    if (err) throw err
    console.log('Updated bin/list.txt')
  })

  // Write bin/list.json
  fs.writeFile(path.join(__dirname, '/bin/list.json'), JSON.stringify({ builds: parsedList, releases: releases }, null, 2), function (err) {
    if (err) throw err
    console.log('Updated bin/list.json')
  })

  fs.writeFile(path.join(__dirname, '/bin/list.js'), generateLegacyListJS(builds, releases), function (err) {
    if (err) throw err
    console.log('Updated bin/list.js')
  })

  // Read latest version
  fs.readFile(path.join(__dirname, '/bin/', latest), function (err, data) {
    if (err) throw err

    // Copy to bin/soljson-latest.js
    fs.writeFile(path.join(__dirname, '/bin/soljson-latest.js'), data, function (err) {
      if (err) throw err
      console.log('Updated bin/soljson-latest.js')
    })

    // Copy to soljson.js
    fs.writeFile(path.join(__dirname, '/soljson.js'), data, function (err) {
      if (err) throw err
      console.log('Updated soljson.js')
    })
  })
})

function generateLegacyListJS (builds, releases) {
  return `
var soljsonSources = ${JSON.stringify(builds, null, 2)};
var soljsonReleases = ${JSON.stringify(releases, null, 2)};

if (typeof(module) !== 'undefined')
  module.exports = {
    'allVersions': soljsonSources,
    'releases': soljsonReleases
  };
`
}
